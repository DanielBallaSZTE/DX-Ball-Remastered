<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_ball</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>SET_SPEED = 4;
destroy = false;

randomize();
ran = random_range(0, 1)

if (ran &gt; 0 &amp;&amp; ran &lt; 0.25) {
    ver_speed = SET_SPEED;
    hor_speed = -SET_SPEED;
}else if (ran &lt; 0.5 &amp;&amp; ran &gt; 0.25){
    ver_speed = -SET_SPEED;
    hor_speed = SET_SPEED;
}else if (ran &lt; 0.75 &amp;&amp; ran &gt; 0.5) {
    ver_speed = SET_SPEED;
    hor_speed = SET_SPEED;
}else if (ran &lt; 1 &amp;&amp; ran &gt; 0.75) {
    ver_speed = -SET_SPEED;
    hor_speed = -SET_SPEED;
}


tick = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*
 * Collisions with objects, bounce offs 
 */

tick++;
// Side of room collisions
if (x - sprite_width / 2 &lt; 0)
{
    hor_speed *= -1;
    x += 1;
}
if (x + sprite_width / 2 &gt; room_width)
{
    hor_speed *= -1;
    x -= 1;
}
if (y - sprite_height / 2 &lt; 0)
{
    ver_speed *= -1;
    y += 1;
}

// Player collisions
if ((distance_to_object(obj_player) &lt; 1) &amp;&amp; (ver_speed &gt; 0) &amp;&amp; y &lt; obj_player.y)
{
    check_pos();
    ver_speed *= -1;
}

// Brick collision system
for (var i = 0; i &lt; SET_SPEED; i++)
{
    brick_id = instance_nearest(x, y, obj_brick);
    if (instance_exists(brick_id)){
        BRICK_TOP = brick_id.y - brick_id.sprite_height / 2;
        BRICK_BOTTOM = brick_id.y + brick_id.sprite_height / 2;
        BRICK_LEFT = brick_id.x - brick_id.sprite_width / 2;
        BRICK_RIGHT = brick_id.x + brick_id.sprite_width / 2;
        
        coll_x = x;
        coll_y = y;
        
        top_of_ball = coll_y - sprite_height / 2;
        bottom_of_ball = coll_y + sprite_height / 2;
        right_side_ball = coll_x + sprite_width / 2;
        left_side_ball = coll_x - sprite_width / 2;
    
        // top of ball, bottom of brick
        if (collision_line(BRICK_LEFT, BRICK_BOTTOM, BRICK_RIGHT, BRICK_BOTTOM, obj_ball, 1, 0))
        {
            show_debug_message("bottom " + string(tick));
            if (!global.pass_through)
                ver_speed *= -1;

            destroy = true;
        }
        // bottom of ball, top of brick
        else if (collision_line(BRICK_LEFT, BRICK_TOP, BRICK_RIGHT, BRICK_TOP, obj_ball, 1, 0))
        {
            show_debug_message("top" + string(tick));
            if (!global.pass_through)
                ver_speed *= -1;

            destroy = true;
        }
        // right side of ball, left side of brick
        else if (collision_line(BRICK_LEFT, BRICK_BOTTOM, BRICK_LEFT, BRICK_TOP, obj_ball, 1, 0))
        {
            show_debug_message("left" + string(tick));
            if (!global.pass_through)
                hor_speed *= -1;

            destroy = true;
        }
        // left side of ball, right side of brick
        else if (collision_line(BRICK_RIGHT, BRICK_BOTTOM, BRICK_RIGHT, BRICK_TOP, obj_ball, 1, 0))
        {
            show_debug_message("right" + string(tick));
            if (!global.pass_through)
                hor_speed *= -1;

            destroy = true;
        }
        if (destroy)
        {
            generate_power(brick_id);
            if (global.fire_ball)
            {
                while (true)
                {
                    if (distance_to_object(obj_brick) &lt; 30)
                    {
                        var inst_id = instance_nearest(x, y, obj_brick);
                        with (inst_id)
                        {
                            generate_power(inst_id);
                            instance_destroy();
                        }
                    }
                    else
                    {
                        break;
                    }
                }
            }
            else
            {
                with (brick_id)
                {
                        instance_destroy();
                }
            }
            destroy = false;
        }
    }
    x += hor_speed / SET_SPEED;
    y += ver_speed / SET_SPEED;
}

if (ver_speed == 0)
{
    x = obj_player.x;
    if (keyboard_check_released(vk_space))
    {
        ver_speed = -SET_SPEED;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*
 * Endgame screens, restarts etc.
 */
 
if (y &gt; room_height) {
    if (instance_number(obj_ball) == 1)
    {
        ball_out();
    }
    else
    {
        instance_destroy();
    }
}

if (global.p_lives == 0) {
    game_end();    
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
